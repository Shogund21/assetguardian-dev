// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bqxdbvrtohhgkusmdjxd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxeGRidnJ0b2hoZ2t1c21kanhkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQzMTA5MzgsImV4cCI6MjA0OTg4NjkzOH0.DfGbaVvQFJ1kXAVdD-CsTX21vasF9yR-3MDOLn8g5-M";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'apikey': SUPABASE_PUBLISHABLE_KEY
    }
  }
});

// Create a token-aware client that ensures JWT is always included
export const createAuthenticatedClient = (accessToken: string) => {
  return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    },
    global: {
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${accessToken}`
      }
    }
  });
};

// Helper function to get authenticated client with current session
export const getAuthenticatedClient = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  
  if (!session?.access_token) {
    console.warn("No access token available for authenticated client");
    return supabase; // Fallback to regular client
  }
  
  console.log("Creating authenticated client with token:", session.access_token.substring(0, 20) + "...");
  return createAuthenticatedClient(session.access_token);
};