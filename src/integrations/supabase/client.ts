// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bqxdbvrtohhgkusmdjxd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxeGRidnJ0b2hoZ2t1c21kanhkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQzMTA5MzgsImV4cCI6MjA0OTg4NjkzOH0.DfGbaVvQFJ1kXAVdD-CsTX21vasF9yR-3MDOLn8g5-M";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'apikey': SUPABASE_PUBLISHABLE_KEY
    }
  }
});

// Create a token-aware client that ensures JWT is always included
export const createAuthenticatedClient = (accessToken: string) => {
  console.log("üîë Creating authenticated client with token:", accessToken.substring(0, 20) + "...");
  
  return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    },
    global: {
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${accessToken}`,
        // Ensure JWT is in request for RLS
        'X-Supabase-JWT': accessToken
      }
    }
  });
};

// Helper function to get authenticated client with current session
export const getAuthenticatedClient = async () => {
  console.log("üîÑ Getting authenticated client...");
  
  // Force a fresh session check to ensure we have the latest token
  const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  
  if (sessionError) {
    console.error("‚ùå Error getting session:", sessionError);
    throw new Error(`Session error: ${sessionError.message}`);
  }
  
  if (!session) {
    console.warn("‚ùå No session available for authenticated client");
    throw new Error("No session available");
  }
  
  if (!session.access_token) {
    console.warn("‚ùå No access token in session");
    throw new Error("No access token available");
  }
  
  if (!session.user?.id) {
    console.warn("‚ùå No user ID in session");
    throw new Error("No user ID in session");
  }
  
  console.log("üîë Creating authenticated client with token:", {
    tokenLength: session.access_token.length,
    userId: session.user.id,
    tokenPreview: session.access_token.substring(0, 20) + "..."
  });
  
  const client = createAuthenticatedClient(session.access_token);
  
  // Test the client with a timeout to prevent hanging
  try {
    console.log("üß™ Testing JWT transmission to database...");
    
    const testPromise = client.rpc('debug_auth_uid');
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error("Database test timeout")), 5000);
    });
    
    const { data: authTest, error } = await Promise.race([testPromise, timeoutPromise]) as any;
    
    if (error) {
      console.error("‚ùå Database test failed:", error);
      // Don't throw on database errors, but log them
      console.warn("‚ö†Ô∏è Continuing with client despite database test failure");
      return client;
    }
    
    if (!authTest?.[0]?.auth_uid) {
      console.error("‚ùå auth.uid() is null - JWT not properly transmitted");
      // Don't throw, but warn about potential RLS issues
      console.warn("‚ö†Ô∏è RLS policies may not work correctly");
      return client;
    }
    
    console.log("‚úÖ JWT transmission validated successfully:", {
      authUid: authTest[0].auth_uid,
      hasJwt: authTest[0].has_jwt
    });
    
    return client;
  } catch (error) {
    console.error("‚ùå Client validation failed:", error);
    // Return client anyway - the connection might work for actual queries
    console.warn("‚ö†Ô∏è Returning client despite validation failure");
    return client;
  }
};