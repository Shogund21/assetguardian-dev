// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bqxdbvrtohhgkusmdjxd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxeGRidnJ0b2hoZ2t1c21kanhkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQzMTA5MzgsImV4cCI6MjA0OTg4NjkzOH0.DfGbaVvQFJ1kXAVdD-CsTX21vasF9yR-3MDOLn8g5-M";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    storage: window.localStorage,
    storageKey: 'supabase.auth.token'
  },
  global: {
    headers: {
      'apikey': SUPABASE_PUBLISHABLE_KEY
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 2
    }
  }
});

// Enhanced helper to test JWT transmission
export const testJWTTransmission = async () => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      console.log("‚ùå No session for JWT test");
      return { success: false, error: "No session" };
    }

    console.log("üîç Testing JWT transmission to database functions...");
    
    // Test debug_auth_uid function
    const { data: debugData, error: debugError } = await supabase.rpc('debug_auth_uid');
    
    if (debugError) {
      console.error("‚ùå debug_auth_uid error:", debugError);
      return { success: false, error: debugError.message };
    }
    
    console.log("üîç JWT Debug Results:", debugData);
    
    // Test is_super_admin function
    const { data: isSuperAdmin, error: superAdminError } = await supabase.rpc('is_super_admin');
    
    if (superAdminError) {
      console.error("‚ùå is_super_admin error:", superAdminError);
      return { success: false, error: superAdminError.message };
    }
    
    console.log("üîç Super Admin Check:", isSuperAdmin);
    
    return { 
      success: true, 
      debugData, 
      isSuperAdmin,
      hasJWT: debugData?.[0]?.has_jwt || false,
      authUid: debugData?.[0]?.auth_uid || null
    };
  } catch (error) {
    console.error("‚ùå JWT transmission test failed:", error);
    return { success: false, error: error.message };
  }
};

// Helper function to ensure session is established before database operations
export const ensureSession = async () => {
  console.log("üîÑ Ensuring session is established...");
  
  const { data: { session }, error } = await supabase.auth.getSession();
  
  if (error) {
    console.error("‚ùå Session error:", error);
    throw new Error(`Session error: ${error.message}`);
  }
  
  if (!session) {
    console.warn("‚ùå No session available");
    throw new Error("No session available - user must be authenticated");
  }
  
  if (!session.access_token || !session.user?.id) {
    console.warn("‚ùå Invalid session data");
    throw new Error("Invalid session data");
  }
  
  console.log("‚úÖ Session validated:", {
    userId: session.user.id,
    hasToken: !!session.access_token
  });
  
  return session;
};